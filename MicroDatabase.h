/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MicroDatabase_H
#define MicroDatabase_H

#include <thrift/TDispatchProcessor.h>
#include "microdatabase_types.h"

namespace microdatabase {

class MicroDatabaseIf {
 public:
  virtual ~MicroDatabaseIf() {}
  virtual int32_t ping() = 0;
  virtual void get(TResult& _return, const std::string& key) = 0;
  virtual int32_t exist(const std::string& key) = 0;
  virtual int32_t put(const std::string& key, const std::string& value) = 0;
  virtual int32_t remove(const std::string& key) = 0;
};

class MicroDatabaseIfFactory {
 public:
  typedef MicroDatabaseIf Handler;

  virtual ~MicroDatabaseIfFactory() {}

  virtual MicroDatabaseIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MicroDatabaseIf* /* handler */) = 0;
};

class MicroDatabaseIfSingletonFactory : virtual public MicroDatabaseIfFactory {
 public:
  MicroDatabaseIfSingletonFactory(const boost::shared_ptr<MicroDatabaseIf>& iface) : iface_(iface) {}
  virtual ~MicroDatabaseIfSingletonFactory() {}

  virtual MicroDatabaseIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MicroDatabaseIf* /* handler */) {}

 protected:
  boost::shared_ptr<MicroDatabaseIf> iface_;
};

class MicroDatabaseNull : virtual public MicroDatabaseIf {
 public:
  virtual ~MicroDatabaseNull() {}
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
  void get(TResult& /* _return */, const std::string& /* key */) {
    return;
  }
  int32_t exist(const std::string& /* key */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t put(const std::string& /* key */, const std::string& /* value */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t remove(const std::string& /* key */) {
    int32_t _return = 0;
    return _return;
  }
};


class MicroDatabase_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MicroDatabase_ping_args(const MicroDatabase_ping_args&);
  MicroDatabase_ping_args& operator=(const MicroDatabase_ping_args&);
  MicroDatabase_ping_args() {
  }

  virtual ~MicroDatabase_ping_args() throw();

  bool operator == (const MicroDatabase_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MicroDatabase_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MicroDatabase_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_ping_args& obj);
};


class MicroDatabase_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MicroDatabase_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_ping_pargs& obj);
};

typedef struct _MicroDatabase_ping_result__isset {
  _MicroDatabase_ping_result__isset() : success(false) {}
  bool success :1;
} _MicroDatabase_ping_result__isset;

class MicroDatabase_ping_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  MicroDatabase_ping_result(const MicroDatabase_ping_result&);
  MicroDatabase_ping_result& operator=(const MicroDatabase_ping_result&);
  MicroDatabase_ping_result() : success(0) {
  }

  virtual ~MicroDatabase_ping_result() throw();
  int32_t success;

  _MicroDatabase_ping_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const MicroDatabase_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MicroDatabase_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MicroDatabase_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_ping_result& obj);
};

typedef struct _MicroDatabase_ping_presult__isset {
  _MicroDatabase_ping_presult__isset() : success(false) {}
  bool success :1;
} _MicroDatabase_ping_presult__isset;

class MicroDatabase_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~MicroDatabase_ping_presult() throw();
  int32_t* success;

  _MicroDatabase_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_ping_presult& obj);
};


class MicroDatabase_get_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MicroDatabase_get_args(const MicroDatabase_get_args&);
  MicroDatabase_get_args& operator=(const MicroDatabase_get_args&);
  MicroDatabase_get_args() : key() {
  }

  virtual ~MicroDatabase_get_args() throw();
  std::string key;

  void __set_key(const std::string& val);

  bool operator == (const MicroDatabase_get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const MicroDatabase_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MicroDatabase_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_get_args& obj);
};


class MicroDatabase_get_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~MicroDatabase_get_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_get_pargs& obj);
};

typedef struct _MicroDatabase_get_result__isset {
  _MicroDatabase_get_result__isset() : success(false) {}
  bool success :1;
} _MicroDatabase_get_result__isset;

class MicroDatabase_get_result {
 public:

  static const char* ascii_fingerprint; // = "DDFFA9412AB4EF78C557964DD06FE1A8";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0xFF,0xA9,0x41,0x2A,0xB4,0xEF,0x78,0xC5,0x57,0x96,0x4D,0xD0,0x6F,0xE1,0xA8};

  MicroDatabase_get_result(const MicroDatabase_get_result&);
  MicroDatabase_get_result& operator=(const MicroDatabase_get_result&);
  MicroDatabase_get_result() {
  }

  virtual ~MicroDatabase_get_result() throw();
  TResult success;

  _MicroDatabase_get_result__isset __isset;

  void __set_success(const TResult& val);

  bool operator == (const MicroDatabase_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MicroDatabase_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MicroDatabase_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_get_result& obj);
};

typedef struct _MicroDatabase_get_presult__isset {
  _MicroDatabase_get_presult__isset() : success(false) {}
  bool success :1;
} _MicroDatabase_get_presult__isset;

class MicroDatabase_get_presult {
 public:

  static const char* ascii_fingerprint; // = "DDFFA9412AB4EF78C557964DD06FE1A8";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0xFF,0xA9,0x41,0x2A,0xB4,0xEF,0x78,0xC5,0x57,0x96,0x4D,0xD0,0x6F,0xE1,0xA8};


  virtual ~MicroDatabase_get_presult() throw();
  TResult* success;

  _MicroDatabase_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_get_presult& obj);
};


class MicroDatabase_exist_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MicroDatabase_exist_args(const MicroDatabase_exist_args&);
  MicroDatabase_exist_args& operator=(const MicroDatabase_exist_args&);
  MicroDatabase_exist_args() : key() {
  }

  virtual ~MicroDatabase_exist_args() throw();
  std::string key;

  void __set_key(const std::string& val);

  bool operator == (const MicroDatabase_exist_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const MicroDatabase_exist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MicroDatabase_exist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_exist_args& obj);
};


class MicroDatabase_exist_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~MicroDatabase_exist_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_exist_pargs& obj);
};

typedef struct _MicroDatabase_exist_result__isset {
  _MicroDatabase_exist_result__isset() : success(false) {}
  bool success :1;
} _MicroDatabase_exist_result__isset;

class MicroDatabase_exist_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  MicroDatabase_exist_result(const MicroDatabase_exist_result&);
  MicroDatabase_exist_result& operator=(const MicroDatabase_exist_result&);
  MicroDatabase_exist_result() : success(0) {
  }

  virtual ~MicroDatabase_exist_result() throw();
  int32_t success;

  _MicroDatabase_exist_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const MicroDatabase_exist_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MicroDatabase_exist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MicroDatabase_exist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_exist_result& obj);
};

typedef struct _MicroDatabase_exist_presult__isset {
  _MicroDatabase_exist_presult__isset() : success(false) {}
  bool success :1;
} _MicroDatabase_exist_presult__isset;

class MicroDatabase_exist_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~MicroDatabase_exist_presult() throw();
  int32_t* success;

  _MicroDatabase_exist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_exist_presult& obj);
};


class MicroDatabase_put_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  MicroDatabase_put_args(const MicroDatabase_put_args&);
  MicroDatabase_put_args& operator=(const MicroDatabase_put_args&);
  MicroDatabase_put_args() : key(), value() {
  }

  virtual ~MicroDatabase_put_args() throw();
  std::string key;
  std::string value;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const MicroDatabase_put_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const MicroDatabase_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MicroDatabase_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_put_args& obj);
};


class MicroDatabase_put_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~MicroDatabase_put_pargs() throw();
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_put_pargs& obj);
};

typedef struct _MicroDatabase_put_result__isset {
  _MicroDatabase_put_result__isset() : success(false) {}
  bool success :1;
} _MicroDatabase_put_result__isset;

class MicroDatabase_put_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  MicroDatabase_put_result(const MicroDatabase_put_result&);
  MicroDatabase_put_result& operator=(const MicroDatabase_put_result&);
  MicroDatabase_put_result() : success(0) {
  }

  virtual ~MicroDatabase_put_result() throw();
  int32_t success;

  _MicroDatabase_put_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const MicroDatabase_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MicroDatabase_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MicroDatabase_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_put_result& obj);
};

typedef struct _MicroDatabase_put_presult__isset {
  _MicroDatabase_put_presult__isset() : success(false) {}
  bool success :1;
} _MicroDatabase_put_presult__isset;

class MicroDatabase_put_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~MicroDatabase_put_presult() throw();
  int32_t* success;

  _MicroDatabase_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_put_presult& obj);
};


class MicroDatabase_remove_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MicroDatabase_remove_args(const MicroDatabase_remove_args&);
  MicroDatabase_remove_args& operator=(const MicroDatabase_remove_args&);
  MicroDatabase_remove_args() : key() {
  }

  virtual ~MicroDatabase_remove_args() throw();
  std::string key;

  void __set_key(const std::string& val);

  bool operator == (const MicroDatabase_remove_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const MicroDatabase_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MicroDatabase_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_remove_args& obj);
};


class MicroDatabase_remove_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~MicroDatabase_remove_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_remove_pargs& obj);
};

typedef struct _MicroDatabase_remove_result__isset {
  _MicroDatabase_remove_result__isset() : success(false) {}
  bool success :1;
} _MicroDatabase_remove_result__isset;

class MicroDatabase_remove_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  MicroDatabase_remove_result(const MicroDatabase_remove_result&);
  MicroDatabase_remove_result& operator=(const MicroDatabase_remove_result&);
  MicroDatabase_remove_result() : success(0) {
  }

  virtual ~MicroDatabase_remove_result() throw();
  int32_t success;

  _MicroDatabase_remove_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const MicroDatabase_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MicroDatabase_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MicroDatabase_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_remove_result& obj);
};

typedef struct _MicroDatabase_remove_presult__isset {
  _MicroDatabase_remove_presult__isset() : success(false) {}
  bool success :1;
} _MicroDatabase_remove_presult__isset;

class MicroDatabase_remove_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~MicroDatabase_remove_presult() throw();
  int32_t* success;

  _MicroDatabase_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MicroDatabase_remove_presult& obj);
};

class MicroDatabaseClient : virtual public MicroDatabaseIf {
 public:
  MicroDatabaseClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MicroDatabaseClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
  void get(TResult& _return, const std::string& key);
  void send_get(const std::string& key);
  void recv_get(TResult& _return);
  int32_t exist(const std::string& key);
  void send_exist(const std::string& key);
  int32_t recv_exist();
  int32_t put(const std::string& key, const std::string& value);
  void send_put(const std::string& key, const std::string& value);
  int32_t recv_put();
  int32_t remove(const std::string& key);
  void send_remove(const std::string& key);
  int32_t recv_remove();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MicroDatabaseProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MicroDatabaseIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MicroDatabaseProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_exist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MicroDatabaseProcessor(boost::shared_ptr<MicroDatabaseIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &MicroDatabaseProcessor::process_ping;
    processMap_["get"] = &MicroDatabaseProcessor::process_get;
    processMap_["exist"] = &MicroDatabaseProcessor::process_exist;
    processMap_["put"] = &MicroDatabaseProcessor::process_put;
    processMap_["remove"] = &MicroDatabaseProcessor::process_remove;
  }

  virtual ~MicroDatabaseProcessor() {}
};

class MicroDatabaseProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MicroDatabaseProcessorFactory(const ::boost::shared_ptr< MicroDatabaseIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MicroDatabaseIfFactory > handlerFactory_;
};

class MicroDatabaseMultiface : virtual public MicroDatabaseIf {
 public:
  MicroDatabaseMultiface(std::vector<boost::shared_ptr<MicroDatabaseIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MicroDatabaseMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MicroDatabaseIf> > ifaces_;
  MicroDatabaseMultiface() {}
  void add(boost::shared_ptr<MicroDatabaseIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  void get(TResult& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, key);
    }
    ifaces_[i]->get(_return, key);
    return;
  }

  int32_t exist(const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exist(key);
    }
    return ifaces_[i]->exist(key);
  }

  int32_t put(const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(key, value);
    }
    return ifaces_[i]->put(key, value);
  }

  int32_t remove(const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(key);
    }
    return ifaces_[i]->remove(key);
  }

};

} // namespace

#endif
