/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef microdatabase_TYPES_H
#define microdatabase_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace microdatabase {

class TResult;

typedef struct _TResult__isset {
  _TResult__isset() : value(false) {}
  bool value :1;
} _TResult__isset;

class TResult {
 public:

  static const char* ascii_fingerprint; // = "96705E9A3FD7B072319C71653E0DBB90";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x70,0x5E,0x9A,0x3F,0xD7,0xB0,0x72,0x31,0x9C,0x71,0x65,0x3E,0x0D,0xBB,0x90};

  TResult(const TResult&);
  TResult& operator=(const TResult&);
  TResult() : error(0), value() {
  }

  virtual ~TResult() throw();
  int32_t error;
  std::string value;

  _TResult__isset __isset;

  void __set_error(const int32_t val);

  void __set_value(const std::string& val);

  bool operator == (const TResult & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (__isset.value != rhs.__isset.value)
      return false;
    else if (__isset.value && !(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TResult& obj);
};

void swap(TResult &a, TResult &b);

} // namespace

#endif
